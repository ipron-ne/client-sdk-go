// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: iwebgw.proto

package iwebgw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Iwebgw_IWebGWCallRegist_FullMethodName    = "/iwebgw.iwebgw/IWebGWCallRegist"
	Iwebgw_IWebGWCallUnRegist_FullMethodName  = "/iwebgw.iwebgw/IWebGWCallUnRegist"
	Iwebgw_IWebGWRequestPage_FullMethodName   = "/iwebgw.iwebgw/IWebGWRequestPage"
	Iwebgw_IWebGWDisconnectWeb_FullMethodName = "/iwebgw.iwebgw/IWebGWDisconnectWeb"
)

// IwebgwClient is the client API for Iwebgw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IwebgwClient interface {
	// 외부 데이터 처리요청(Host, DB, ...)
	IWebGWCallRegist(ctx context.Context, in *IWebGWCallRegistReq, opts ...grpc.CallOption) (*IWebGWCallRegistRes, error)
	IWebGWCallUnRegist(ctx context.Context, in *IWebGWCallUnRegistReq, opts ...grpc.CallOption) (*IWebGWCallUnRegistRes, error)
	IWebGWRequestPage(ctx context.Context, in *IWebGWRequestPageReq, opts ...grpc.CallOption) (*IWebGWRequestPageRes, error)
	IWebGWDisconnectWeb(ctx context.Context, in *IWebGWDisconnectWebReq, opts ...grpc.CallOption) (*IWebGWDisconnectWebRes, error)
}

type iwebgwClient struct {
	cc grpc.ClientConnInterface
}

func NewIwebgwClient(cc grpc.ClientConnInterface) IwebgwClient {
	return &iwebgwClient{cc}
}

func (c *iwebgwClient) IWebGWCallRegist(ctx context.Context, in *IWebGWCallRegistReq, opts ...grpc.CallOption) (*IWebGWCallRegistRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IWebGWCallRegistRes)
	err := c.cc.Invoke(ctx, Iwebgw_IWebGWCallRegist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iwebgwClient) IWebGWCallUnRegist(ctx context.Context, in *IWebGWCallUnRegistReq, opts ...grpc.CallOption) (*IWebGWCallUnRegistRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IWebGWCallUnRegistRes)
	err := c.cc.Invoke(ctx, Iwebgw_IWebGWCallUnRegist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iwebgwClient) IWebGWRequestPage(ctx context.Context, in *IWebGWRequestPageReq, opts ...grpc.CallOption) (*IWebGWRequestPageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IWebGWRequestPageRes)
	err := c.cc.Invoke(ctx, Iwebgw_IWebGWRequestPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iwebgwClient) IWebGWDisconnectWeb(ctx context.Context, in *IWebGWDisconnectWebReq, opts ...grpc.CallOption) (*IWebGWDisconnectWebRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IWebGWDisconnectWebRes)
	err := c.cc.Invoke(ctx, Iwebgw_IWebGWDisconnectWeb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IwebgwServer is the server API for Iwebgw service.
// All implementations must embed UnimplementedIwebgwServer
// for forward compatibility.
type IwebgwServer interface {
	// 외부 데이터 처리요청(Host, DB, ...)
	IWebGWCallRegist(context.Context, *IWebGWCallRegistReq) (*IWebGWCallRegistRes, error)
	IWebGWCallUnRegist(context.Context, *IWebGWCallUnRegistReq) (*IWebGWCallUnRegistRes, error)
	IWebGWRequestPage(context.Context, *IWebGWRequestPageReq) (*IWebGWRequestPageRes, error)
	IWebGWDisconnectWeb(context.Context, *IWebGWDisconnectWebReq) (*IWebGWDisconnectWebRes, error)
	mustEmbedUnimplementedIwebgwServer()
}

// UnimplementedIwebgwServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIwebgwServer struct{}

func (UnimplementedIwebgwServer) IWebGWCallRegist(context.Context, *IWebGWCallRegistReq) (*IWebGWCallRegistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IWebGWCallRegist not implemented")
}
func (UnimplementedIwebgwServer) IWebGWCallUnRegist(context.Context, *IWebGWCallUnRegistReq) (*IWebGWCallUnRegistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IWebGWCallUnRegist not implemented")
}
func (UnimplementedIwebgwServer) IWebGWRequestPage(context.Context, *IWebGWRequestPageReq) (*IWebGWRequestPageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IWebGWRequestPage not implemented")
}
func (UnimplementedIwebgwServer) IWebGWDisconnectWeb(context.Context, *IWebGWDisconnectWebReq) (*IWebGWDisconnectWebRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IWebGWDisconnectWeb not implemented")
}
func (UnimplementedIwebgwServer) mustEmbedUnimplementedIwebgwServer() {}
func (UnimplementedIwebgwServer) testEmbeddedByValue()                {}

// UnsafeIwebgwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IwebgwServer will
// result in compilation errors.
type UnsafeIwebgwServer interface {
	mustEmbedUnimplementedIwebgwServer()
}

func RegisterIwebgwServer(s grpc.ServiceRegistrar, srv IwebgwServer) {
	// If the following call pancis, it indicates UnimplementedIwebgwServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Iwebgw_ServiceDesc, srv)
}

func _Iwebgw_IWebGWCallRegist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IWebGWCallRegistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IwebgwServer).IWebGWCallRegist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iwebgw_IWebGWCallRegist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IwebgwServer).IWebGWCallRegist(ctx, req.(*IWebGWCallRegistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iwebgw_IWebGWCallUnRegist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IWebGWCallUnRegistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IwebgwServer).IWebGWCallUnRegist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iwebgw_IWebGWCallUnRegist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IwebgwServer).IWebGWCallUnRegist(ctx, req.(*IWebGWCallUnRegistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iwebgw_IWebGWRequestPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IWebGWRequestPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IwebgwServer).IWebGWRequestPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iwebgw_IWebGWRequestPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IwebgwServer).IWebGWRequestPage(ctx, req.(*IWebGWRequestPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iwebgw_IWebGWDisconnectWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IWebGWDisconnectWebReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IwebgwServer).IWebGWDisconnectWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iwebgw_IWebGWDisconnectWeb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IwebgwServer).IWebGWDisconnectWeb(ctx, req.(*IWebGWDisconnectWebReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Iwebgw_ServiceDesc is the grpc.ServiceDesc for Iwebgw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Iwebgw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iwebgw.iwebgw",
	HandlerType: (*IwebgwServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IWebGWCallRegist",
			Handler:    _Iwebgw_IWebGWCallRegist_Handler,
		},
		{
			MethodName: "IWebGWCallUnRegist",
			Handler:    _Iwebgw_IWebGWCallUnRegist_Handler,
		},
		{
			MethodName: "IWebGWRequestPage",
			Handler:    _Iwebgw_IWebGWRequestPage_Handler,
		},
		{
			MethodName: "IWebGWDisconnectWeb",
			Handler:    _Iwebgw_IWebGWDisconnectWeb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iwebgw.proto",
}

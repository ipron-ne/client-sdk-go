// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: iwebgw.proto

package iwebgw

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IWebGWCallRegistReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IWebGWCallRegistReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IWebGWCallRegistReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IWebGWCallRegistReqMultiError, or nil if none found.
func (m *IWebGWCallRegistReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IWebGWCallRegistReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for CallId

	// no validation rules for UserAni

	if len(errors) > 0 {
		return IWebGWCallRegistReqMultiError(errors)
	}

	return nil
}

// IWebGWCallRegistReqMultiError is an error wrapping multiple validation
// errors returned by IWebGWCallRegistReq.ValidateAll() if the designated
// constraints aren't met.
type IWebGWCallRegistReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IWebGWCallRegistReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IWebGWCallRegistReqMultiError) AllErrors() []error { return m }

// IWebGWCallRegistReqValidationError is the validation error returned by
// IWebGWCallRegistReq.Validate if the designated constraints aren't met.
type IWebGWCallRegistReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IWebGWCallRegistReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IWebGWCallRegistReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IWebGWCallRegistReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IWebGWCallRegistReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IWebGWCallRegistReqValidationError) ErrorName() string {
	return "IWebGWCallRegistReqValidationError"
}

// Error satisfies the builtin error interface
func (e IWebGWCallRegistReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIWebGWCallRegistReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IWebGWCallRegistReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IWebGWCallRegistReqValidationError{}

// Validate checks the field values on IWebGWCallRegistRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IWebGWCallRegistRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IWebGWCallRegistRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IWebGWCallRegistResMultiError, or nil if none found.
func (m *IWebGWCallRegistRes) ValidateAll() error {
	return m.validate(true)
}

func (m *IWebGWCallRegistRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Token

	if len(errors) > 0 {
		return IWebGWCallRegistResMultiError(errors)
	}

	return nil
}

// IWebGWCallRegistResMultiError is an error wrapping multiple validation
// errors returned by IWebGWCallRegistRes.ValidateAll() if the designated
// constraints aren't met.
type IWebGWCallRegistResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IWebGWCallRegistResMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IWebGWCallRegistResMultiError) AllErrors() []error { return m }

// IWebGWCallRegistResValidationError is the validation error returned by
// IWebGWCallRegistRes.Validate if the designated constraints aren't met.
type IWebGWCallRegistResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IWebGWCallRegistResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IWebGWCallRegistResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IWebGWCallRegistResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IWebGWCallRegistResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IWebGWCallRegistResValidationError) ErrorName() string {
	return "IWebGWCallRegistResValidationError"
}

// Error satisfies the builtin error interface
func (e IWebGWCallRegistResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIWebGWCallRegistRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IWebGWCallRegistResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IWebGWCallRegistResValidationError{}

// Validate checks the field values on IWebGWCallUnRegistReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IWebGWCallUnRegistReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IWebGWCallUnRegistReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IWebGWCallUnRegistReqMultiError, or nil if none found.
func (m *IWebGWCallUnRegistReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IWebGWCallUnRegistReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for CallId

	if len(errors) > 0 {
		return IWebGWCallUnRegistReqMultiError(errors)
	}

	return nil
}

// IWebGWCallUnRegistReqMultiError is an error wrapping multiple validation
// errors returned by IWebGWCallUnRegistReq.ValidateAll() if the designated
// constraints aren't met.
type IWebGWCallUnRegistReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IWebGWCallUnRegistReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IWebGWCallUnRegistReqMultiError) AllErrors() []error { return m }

// IWebGWCallUnRegistReqValidationError is the validation error returned by
// IWebGWCallUnRegistReq.Validate if the designated constraints aren't met.
type IWebGWCallUnRegistReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IWebGWCallUnRegistReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IWebGWCallUnRegistReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IWebGWCallUnRegistReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IWebGWCallUnRegistReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IWebGWCallUnRegistReqValidationError) ErrorName() string {
	return "IWebGWCallUnRegistReqValidationError"
}

// Error satisfies the builtin error interface
func (e IWebGWCallUnRegistReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIWebGWCallUnRegistReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IWebGWCallUnRegistReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IWebGWCallUnRegistReqValidationError{}

// Validate checks the field values on IWebGWCallUnRegistRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IWebGWCallUnRegistRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IWebGWCallUnRegistRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IWebGWCallUnRegistResMultiError, or nil if none found.
func (m *IWebGWCallUnRegistRes) ValidateAll() error {
	return m.validate(true)
}

func (m *IWebGWCallUnRegistRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return IWebGWCallUnRegistResMultiError(errors)
	}

	return nil
}

// IWebGWCallUnRegistResMultiError is an error wrapping multiple validation
// errors returned by IWebGWCallUnRegistRes.ValidateAll() if the designated
// constraints aren't met.
type IWebGWCallUnRegistResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IWebGWCallUnRegistResMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IWebGWCallUnRegistResMultiError) AllErrors() []error { return m }

// IWebGWCallUnRegistResValidationError is the validation error returned by
// IWebGWCallUnRegistRes.Validate if the designated constraints aren't met.
type IWebGWCallUnRegistResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IWebGWCallUnRegistResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IWebGWCallUnRegistResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IWebGWCallUnRegistResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IWebGWCallUnRegistResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IWebGWCallUnRegistResValidationError) ErrorName() string {
	return "IWebGWCallUnRegistResValidationError"
}

// Error satisfies the builtin error interface
func (e IWebGWCallUnRegistResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIWebGWCallUnRegistRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IWebGWCallUnRegistResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IWebGWCallUnRegistResValidationError{}

// Validate checks the field values on IWebGWRequestPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IWebGWRequestPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IWebGWRequestPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IWebGWRequestPageReqMultiError, or nil if none found.
func (m *IWebGWRequestPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IWebGWRequestPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for CallId

	// no validation rules for TransactionId

	// no validation rules for PageFilename

	// no validation rules for PageData

	// no validation rules for Bargin

	if len(errors) > 0 {
		return IWebGWRequestPageReqMultiError(errors)
	}

	return nil
}

// IWebGWRequestPageReqMultiError is an error wrapping multiple validation
// errors returned by IWebGWRequestPageReq.ValidateAll() if the designated
// constraints aren't met.
type IWebGWRequestPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IWebGWRequestPageReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IWebGWRequestPageReqMultiError) AllErrors() []error { return m }

// IWebGWRequestPageReqValidationError is the validation error returned by
// IWebGWRequestPageReq.Validate if the designated constraints aren't met.
type IWebGWRequestPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IWebGWRequestPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IWebGWRequestPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IWebGWRequestPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IWebGWRequestPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IWebGWRequestPageReqValidationError) ErrorName() string {
	return "IWebGWRequestPageReqValidationError"
}

// Error satisfies the builtin error interface
func (e IWebGWRequestPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIWebGWRequestPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IWebGWRequestPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IWebGWRequestPageReqValidationError{}

// Validate checks the field values on IWebGWRequestPageRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IWebGWRequestPageRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IWebGWRequestPageRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IWebGWRequestPageResMultiError, or nil if none found.
func (m *IWebGWRequestPageRes) ValidateAll() error {
	return m.validate(true)
}

func (m *IWebGWRequestPageRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return IWebGWRequestPageResMultiError(errors)
	}

	return nil
}

// IWebGWRequestPageResMultiError is an error wrapping multiple validation
// errors returned by IWebGWRequestPageRes.ValidateAll() if the designated
// constraints aren't met.
type IWebGWRequestPageResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IWebGWRequestPageResMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IWebGWRequestPageResMultiError) AllErrors() []error { return m }

// IWebGWRequestPageResValidationError is the validation error returned by
// IWebGWRequestPageRes.Validate if the designated constraints aren't met.
type IWebGWRequestPageResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IWebGWRequestPageResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IWebGWRequestPageResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IWebGWRequestPageResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IWebGWRequestPageResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IWebGWRequestPageResValidationError) ErrorName() string {
	return "IWebGWRequestPageResValidationError"
}

// Error satisfies the builtin error interface
func (e IWebGWRequestPageResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIWebGWRequestPageRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IWebGWRequestPageResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IWebGWRequestPageResValidationError{}

// Validate checks the field values on IWebGWDisconnectWebReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IWebGWDisconnectWebReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IWebGWDisconnectWebReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IWebGWDisconnectWebReqMultiError, or nil if none found.
func (m *IWebGWDisconnectWebReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IWebGWDisconnectWebReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for CallId

	// no validation rules for TransactionId

	if len(errors) > 0 {
		return IWebGWDisconnectWebReqMultiError(errors)
	}

	return nil
}

// IWebGWDisconnectWebReqMultiError is an error wrapping multiple validation
// errors returned by IWebGWDisconnectWebReq.ValidateAll() if the designated
// constraints aren't met.
type IWebGWDisconnectWebReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IWebGWDisconnectWebReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IWebGWDisconnectWebReqMultiError) AllErrors() []error { return m }

// IWebGWDisconnectWebReqValidationError is the validation error returned by
// IWebGWDisconnectWebReq.Validate if the designated constraints aren't met.
type IWebGWDisconnectWebReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IWebGWDisconnectWebReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IWebGWDisconnectWebReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IWebGWDisconnectWebReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IWebGWDisconnectWebReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IWebGWDisconnectWebReqValidationError) ErrorName() string {
	return "IWebGWDisconnectWebReqValidationError"
}

// Error satisfies the builtin error interface
func (e IWebGWDisconnectWebReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIWebGWDisconnectWebReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IWebGWDisconnectWebReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IWebGWDisconnectWebReqValidationError{}

// Validate checks the field values on IWebGWDisconnectWebRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IWebGWDisconnectWebRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IWebGWDisconnectWebRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IWebGWDisconnectWebResMultiError, or nil if none found.
func (m *IWebGWDisconnectWebRes) ValidateAll() error {
	return m.validate(true)
}

func (m *IWebGWDisconnectWebRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return IWebGWDisconnectWebResMultiError(errors)
	}

	return nil
}

// IWebGWDisconnectWebResMultiError is an error wrapping multiple validation
// errors returned by IWebGWDisconnectWebRes.ValidateAll() if the designated
// constraints aren't met.
type IWebGWDisconnectWebResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IWebGWDisconnectWebResMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IWebGWDisconnectWebResMultiError) AllErrors() []error { return m }

// IWebGWDisconnectWebResValidationError is the validation error returned by
// IWebGWDisconnectWebRes.Validate if the designated constraints aren't met.
type IWebGWDisconnectWebResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IWebGWDisconnectWebResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IWebGWDisconnectWebResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IWebGWDisconnectWebResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IWebGWDisconnectWebResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IWebGWDisconnectWebResValidationError) ErrorName() string {
	return "IWebGWDisconnectWebResValidationError"
}

// Error satisfies the builtin error interface
func (e IWebGWDisconnectWebResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIWebGWDisconnectWebRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IWebGWDisconnectWebResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IWebGWDisconnectWebResValidationError{}

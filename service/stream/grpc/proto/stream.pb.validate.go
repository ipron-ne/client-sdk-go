// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stream.proto

package stream

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StreamServiceAllocReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamServiceAllocReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamServiceAllocReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamServiceAllocReqMultiError, or nil if none found.
func (m *StreamServiceAllocReq) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamServiceAllocReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallId

	// no validation rules for ConnectionId

	if len(errors) > 0 {
		return StreamServiceAllocReqMultiError(errors)
	}

	return nil
}

// StreamServiceAllocReqMultiError is an error wrapping multiple validation
// errors returned by StreamServiceAllocReq.ValidateAll() if the designated
// constraints aren't met.
type StreamServiceAllocReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamServiceAllocReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamServiceAllocReqMultiError) AllErrors() []error { return m }

// StreamServiceAllocReqValidationError is the validation error returned by
// StreamServiceAllocReq.Validate if the designated constraints aren't met.
type StreamServiceAllocReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamServiceAllocReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamServiceAllocReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamServiceAllocReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamServiceAllocReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamServiceAllocReqValidationError) ErrorName() string {
	return "StreamServiceAllocReqValidationError"
}

// Error satisfies the builtin error interface
func (e StreamServiceAllocReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamServiceAllocReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamServiceAllocReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamServiceAllocReqValidationError{}

// Validate checks the field values on StreamServiceAllocResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamServiceAllocResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamServiceAllocResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamServiceAllocRespMultiError, or nil if none found.
func (m *StreamServiceAllocResp) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamServiceAllocResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	// no validation rules for PodName

	// no validation rules for PodAddr

	if len(errors) > 0 {
		return StreamServiceAllocRespMultiError(errors)
	}

	return nil
}

// StreamServiceAllocRespMultiError is an error wrapping multiple validation
// errors returned by StreamServiceAllocResp.ValidateAll() if the designated
// constraints aren't met.
type StreamServiceAllocRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamServiceAllocRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamServiceAllocRespMultiError) AllErrors() []error { return m }

// StreamServiceAllocRespValidationError is the validation error returned by
// StreamServiceAllocResp.Validate if the designated constraints aren't met.
type StreamServiceAllocRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamServiceAllocRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamServiceAllocRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamServiceAllocRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamServiceAllocRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamServiceAllocRespValidationError) ErrorName() string {
	return "StreamServiceAllocRespValidationError"
}

// Error satisfies the builtin error interface
func (e StreamServiceAllocRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamServiceAllocResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamServiceAllocRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamServiceAllocRespValidationError{}

// Validate checks the field values on StreamAllocReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamAllocReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamAllocReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamAllocReqMultiError,
// or nil if none found.
func (m *StreamAllocReq) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamAllocReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallId

	// no validation rules for ConnectionId

	// no validation rules for StreamType

	if len(errors) > 0 {
		return StreamAllocReqMultiError(errors)
	}

	return nil
}

// StreamAllocReqMultiError is an error wrapping multiple validation errors
// returned by StreamAllocReq.ValidateAll() if the designated constraints
// aren't met.
type StreamAllocReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamAllocReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamAllocReqMultiError) AllErrors() []error { return m }

// StreamAllocReqValidationError is the validation error returned by
// StreamAllocReq.Validate if the designated constraints aren't met.
type StreamAllocReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamAllocReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamAllocReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamAllocReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamAllocReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamAllocReqValidationError) ErrorName() string { return "StreamAllocReqValidationError" }

// Error satisfies the builtin error interface
func (e StreamAllocReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamAllocReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamAllocReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamAllocReqValidationError{}

// Validate checks the field values on StreamAllocResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StreamAllocResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamAllocResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamAllocRespMultiError, or nil if none found.
func (m *StreamAllocResp) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamAllocResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Payload.(type) {
	case *StreamAllocResp_Header:
		if v == nil {
			err := StreamAllocRespValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeader()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamAllocRespValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamAllocRespValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamAllocRespValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamAllocResp_Chunk:
		if v == nil {
			err := StreamAllocRespValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChunk()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamAllocRespValidationError{
						field:  "Chunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamAllocRespValidationError{
						field:  "Chunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamAllocRespValidationError{
					field:  "Chunk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StreamAllocRespMultiError(errors)
	}

	return nil
}

// StreamAllocRespMultiError is an error wrapping multiple validation errors
// returned by StreamAllocResp.ValidateAll() if the designated constraints
// aren't met.
type StreamAllocRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamAllocRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamAllocRespMultiError) AllErrors() []error { return m }

// StreamAllocRespValidationError is the validation error returned by
// StreamAllocResp.Validate if the designated constraints aren't met.
type StreamAllocRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamAllocRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamAllocRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamAllocRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamAllocRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamAllocRespValidationError) ErrorName() string { return "StreamAllocRespValidationError" }

// Error satisfies the builtin error interface
func (e StreamAllocRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamAllocResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamAllocRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamAllocRespValidationError{}

// Validate checks the field values on StreamHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamHeader with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamHeaderMultiError, or
// nil if none found.
func (m *StreamHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallId

	// no validation rules for ConnectionId

	// no validation rules for StatusCode

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return StreamHeaderMultiError(errors)
	}

	return nil
}

// StreamHeaderMultiError is an error wrapping multiple validation errors
// returned by StreamHeader.ValidateAll() if the designated constraints aren't met.
type StreamHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamHeaderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamHeaderMultiError) AllErrors() []error { return m }

// StreamHeaderValidationError is the validation error returned by
// StreamHeader.Validate if the designated constraints aren't met.
type StreamHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamHeaderValidationError) ErrorName() string { return "StreamHeaderValidationError" }

// Error satisfies the builtin error interface
func (e StreamHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamHeaderValidationError{}

// Validate checks the field values on StreamChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamChunkMultiError, or
// nil if none found.
func (m *StreamChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StreamData

	if len(errors) > 0 {
		return StreamChunkMultiError(errors)
	}

	return nil
}

// StreamChunkMultiError is an error wrapping multiple validation errors
// returned by StreamChunk.ValidateAll() if the designated constraints aren't met.
type StreamChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChunkMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChunkMultiError) AllErrors() []error { return m }

// StreamChunkValidationError is the validation error returned by
// StreamChunk.Validate if the designated constraints aren't met.
type StreamChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChunkValidationError) ErrorName() string { return "StreamChunkValidationError" }

// Error satisfies the builtin error interface
func (e StreamChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChunkValidationError{}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: stream.proto

// Stream Service에서 사용하는 gRPC 기능

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Stream_StreamServiceAlloc_FullMethodName = "/stream.Stream/StreamServiceAlloc"
	Stream_StreamAlloc_FullMethodName        = "/stream.Stream/StreamAlloc"
)

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Stream Service 의 동작 기능
type StreamClient interface {
	// 사용가능한 스트림 서비스를 받아온다.
	StreamServiceAlloc(ctx context.Context, in *StreamServiceAllocReq, opts ...grpc.CallOption) (*StreamServiceAllocResp, error)
	// 요청에 포함된 Connection 의 Media Stream을 받는다.
	StreamAlloc(ctx context.Context, in *StreamAllocReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAllocResp], error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) StreamServiceAlloc(ctx context.Context, in *StreamServiceAllocReq, opts ...grpc.CallOption) (*StreamServiceAllocResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamServiceAllocResp)
	err := c.cc.Invoke(ctx, Stream_StreamServiceAlloc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) StreamAlloc(ctx context.Context, in *StreamAllocReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAllocResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[0], Stream_StreamAlloc_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAllocReq, StreamAllocResp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamAllocClient = grpc.ServerStreamingClient[StreamAllocResp]

// StreamServer is the server API for Stream service.
// All implementations must embed UnimplementedStreamServer
// for forward compatibility.
//
// Stream Service 의 동작 기능
type StreamServer interface {
	// 사용가능한 스트림 서비스를 받아온다.
	StreamServiceAlloc(context.Context, *StreamServiceAllocReq) (*StreamServiceAllocResp, error)
	// 요청에 포함된 Connection 의 Media Stream을 받는다.
	StreamAlloc(*StreamAllocReq, grpc.ServerStreamingServer[StreamAllocResp]) error
	mustEmbedUnimplementedStreamServer()
}

// UnimplementedStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamServer struct{}

func (UnimplementedStreamServer) StreamServiceAlloc(context.Context, *StreamServiceAllocReq) (*StreamServiceAllocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamServiceAlloc not implemented")
}
func (UnimplementedStreamServer) StreamAlloc(*StreamAllocReq, grpc.ServerStreamingServer[StreamAllocResp]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAlloc not implemented")
}
func (UnimplementedStreamServer) mustEmbedUnimplementedStreamServer() {}
func (UnimplementedStreamServer) testEmbeddedByValue()                {}

// UnsafeStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServer will
// result in compilation errors.
type UnsafeStreamServer interface {
	mustEmbedUnimplementedStreamServer()
}

func RegisterStreamServer(s grpc.ServiceRegistrar, srv StreamServer) {
	// If the following call pancis, it indicates UnimplementedStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Stream_ServiceDesc, srv)
}

func _Stream_StreamServiceAlloc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamServiceAllocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).StreamServiceAlloc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stream_StreamServiceAlloc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).StreamServiceAlloc(ctx, req.(*StreamServiceAllocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_StreamAlloc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAllocReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).StreamAlloc(m, &grpc.GenericServerStream[StreamAllocReq, StreamAllocResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamAllocServer = grpc.ServerStreamingServer[StreamAllocResp]

// Stream_ServiceDesc is the grpc.ServiceDesc for Stream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StreamServiceAlloc",
			Handler:    _Stream_StreamServiceAlloc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAlloc",
			Handler:       _Stream_StreamAlloc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: stream.proto

// Stream Service에서 사용하는 gRPC 기능

package stream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamStatus int32

const (
	StreamStatus_OK                    StreamStatus = 0
	StreamStatus_INVALID_PARAM         StreamStatus = 1
	StreamStatus_CREATE_CHANNEL_FAILED StreamStatus = 2
	StreamStatus_UPDATE_URI_ERROR      StreamStatus = 3
	StreamStatus_GET_CHANNEL_FAILED    StreamStatus = 4
	StreamStatus_MEDIA_URL_NOT_FOUND   StreamStatus = 5
	StreamStatus_STREAM_CHANNEL_CLOSED StreamStatus = 6
)

// Enum value maps for StreamStatus.
var (
	StreamStatus_name = map[int32]string{
		0: "OK",
		1: "INVALID_PARAM",
		2: "CREATE_CHANNEL_FAILED",
		3: "UPDATE_URI_ERROR",
		4: "GET_CHANNEL_FAILED",
		5: "MEDIA_URL_NOT_FOUND",
		6: "STREAM_CHANNEL_CLOSED",
	}
	StreamStatus_value = map[string]int32{
		"OK":                    0,
		"INVALID_PARAM":         1,
		"CREATE_CHANNEL_FAILED": 2,
		"UPDATE_URI_ERROR":      3,
		"GET_CHANNEL_FAILED":    4,
		"MEDIA_URL_NOT_FOUND":   5,
		"STREAM_CHANNEL_CLOSED": 6,
	}
)

func (x StreamStatus) Enum() *StreamStatus {
	p := new(StreamStatus)
	*p = x
	return p
}

func (x StreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_stream_proto_enumTypes[0].Descriptor()
}

func (StreamStatus) Type() protoreflect.EnumType {
	return &file_stream_proto_enumTypes[0]
}

func (x StreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamStatus.Descriptor instead.
func (StreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{0}
}

// *
// Stream Serivce 선택을 위한 요청
type StreamServiceAllocReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CallId        string                 `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`                   // Stream 사용할 Connection이 속한 Call의 ID
	ConnectionId  string                 `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"` // Stream 사용할 Connection ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamServiceAllocReq) Reset() {
	*x = StreamServiceAllocReq{}
	mi := &file_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamServiceAllocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamServiceAllocReq) ProtoMessage() {}

func (x *StreamServiceAllocReq) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamServiceAllocReq.ProtoReflect.Descriptor instead.
func (*StreamServiceAllocReq) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{0}
}

func (x *StreamServiceAllocReq) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *StreamServiceAllocReq) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

// *
// 사용 가능한 Stream Serivce 응답
type StreamServiceAllocResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"` // 요청한 Connection ID
	PodName       string                 `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`                // 사용가능한 StreamService 이름
	PodAddr       string                 `protobuf:"bytes,3,opt,name=pod_addr,json=podAddr,proto3" json:"pod_addr,omitempty"`                // 사용가능한 StreamService 주소
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamServiceAllocResp) Reset() {
	*x = StreamServiceAllocResp{}
	mi := &file_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamServiceAllocResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamServiceAllocResp) ProtoMessage() {}

func (x *StreamServiceAllocResp) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamServiceAllocResp.ProtoReflect.Descriptor instead.
func (*StreamServiceAllocResp) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{1}
}

func (x *StreamServiceAllocResp) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *StreamServiceAllocResp) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *StreamServiceAllocResp) GetPodAddr() string {
	if x != nil {
		return x.PodAddr
	}
	return ""
}

// *
// Connection의 사용중인 Stream 요청
type StreamAllocReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CallId        string                 `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`                   // Stream 사용할 Connection이 속한 Call의 ID
	ConnectionId  string                 `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"` // Stream 사용할 Connection ID
	StreamType    string                 `protobuf:"bytes,3,opt,name=stream_type,json=streamType,proto3" json:"stream_type,omitempty"`       // Connection의 전송받을 미디어 타입 rx, tx 중 선택
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamAllocReq) Reset() {
	*x = StreamAllocReq{}
	mi := &file_stream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAllocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAllocReq) ProtoMessage() {}

func (x *StreamAllocReq) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAllocReq.ProtoReflect.Descriptor instead.
func (*StreamAllocReq) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{2}
}

func (x *StreamAllocReq) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *StreamAllocReq) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *StreamAllocReq) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

// *
// Connection의 사용중인 Stream 요청
type StreamAllocResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*StreamAllocResp_Header
	//	*StreamAllocResp_Chunk
	Payload       isStreamAllocResp_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamAllocResp) Reset() {
	*x = StreamAllocResp{}
	mi := &file_stream_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAllocResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAllocResp) ProtoMessage() {}

func (x *StreamAllocResp) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAllocResp.ProtoReflect.Descriptor instead.
func (*StreamAllocResp) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{3}
}

func (x *StreamAllocResp) GetPayload() isStreamAllocResp_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *StreamAllocResp) GetHeader() *StreamHeader {
	if x != nil {
		if x, ok := x.Payload.(*StreamAllocResp_Header); ok {
			return x.Header
		}
	}
	return nil
}

func (x *StreamAllocResp) GetChunk() *StreamChunk {
	if x != nil {
		if x, ok := x.Payload.(*StreamAllocResp_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

type isStreamAllocResp_Payload interface {
	isStreamAllocResp_Payload()
}

type StreamAllocResp_Header struct {
	Header *StreamHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"` // 최초 1회 또는 상태 변경시 사용
}

type StreamAllocResp_Chunk struct {
	Chunk *StreamChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"` // 이후 계속 전송되는 PCM 데이터
}

func (*StreamAllocResp_Header) isStreamAllocResp_Payload() {}

func (*StreamAllocResp_Chunk) isStreamAllocResp_Payload() {}

type StreamHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CallId        string                 `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`                                       // 전송받는 Stream이 속한 Call의 ID
	ConnectionId  string                 `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`                     // 전송받는 Stream이 속한 Connectino의 ID
	StatusCode    StreamStatus           `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3,enum=stream.StreamStatus" json:"status_code,omitempty"` // 0: 성공, 나머지: 에러 코드
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                     // 실패 시 에러 메시지
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamHeader) Reset() {
	*x = StreamHeader{}
	mi := &file_stream_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHeader) ProtoMessage() {}

func (x *StreamHeader) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHeader.ProtoReflect.Descriptor instead.
func (*StreamHeader) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{4}
}

func (x *StreamHeader) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *StreamHeader) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *StreamHeader) GetStatusCode() StreamStatus {
	if x != nil {
		return x.StatusCode
	}
	return StreamStatus_OK
}

func (x *StreamHeader) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type StreamChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamData    []byte                 `protobuf:"bytes,1,opt,name=stream_data,json=streamData,proto3" json:"stream_data,omitempty"` // 전송받는 Stream 데이터 (PCM Linear, 16bit)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamChunk) Reset() {
	*x = StreamChunk{}
	mi := &file_stream_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChunk) ProtoMessage() {}

func (x *StreamChunk) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChunk.ProtoReflect.Descriptor instead.
func (*StreamChunk) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{5}
}

func (x *StreamChunk) GetStreamData() []byte {
	if x != nil {
		return x.StreamData
	}
	return nil
}

var File_stream_proto protoreflect.FileDescriptor

const file_stream_proto_rawDesc = "" +
	"\n" +
	"\fstream.proto\x12\x06stream\"U\n" +
	"\x15StreamServiceAllocReq\x12\x17\n" +
	"\acall_id\x18\x01 \x01(\tR\x06callId\x12#\n" +
	"\rconnection_id\x18\x02 \x01(\tR\fconnectionId\"s\n" +
	"\x16StreamServiceAllocResp\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\x12\x19\n" +
	"\bpod_name\x18\x02 \x01(\tR\apodName\x12\x19\n" +
	"\bpod_addr\x18\x03 \x01(\tR\apodAddr\"o\n" +
	"\x0eStreamAllocReq\x12\x17\n" +
	"\acall_id\x18\x01 \x01(\tR\x06callId\x12#\n" +
	"\rconnection_id\x18\x02 \x01(\tR\fconnectionId\x12\x1f\n" +
	"\vstream_type\x18\x03 \x01(\tR\n" +
	"streamType\"y\n" +
	"\x0fStreamAllocResp\x12.\n" +
	"\x06header\x18\x01 \x01(\v2\x14.stream.StreamHeaderH\x00R\x06header\x12+\n" +
	"\x05chunk\x18\x02 \x01(\v2\x13.stream.StreamChunkH\x00R\x05chunkB\t\n" +
	"\apayload\"\xa8\x01\n" +
	"\fStreamHeader\x12\x17\n" +
	"\acall_id\x18\x01 \x01(\tR\x06callId\x12#\n" +
	"\rconnection_id\x18\x02 \x01(\tR\fconnectionId\x125\n" +
	"\vstatus_code\x18\x03 \x01(\x0e2\x14.stream.StreamStatusR\n" +
	"statusCode\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\".\n" +
	"\vStreamChunk\x12\x1f\n" +
	"\vstream_data\x18\x01 \x01(\fR\n" +
	"streamData*\xa6\x01\n" +
	"\fStreamStatus\x12\x06\n" +
	"\x02OK\x10\x00\x12\x11\n" +
	"\rINVALID_PARAM\x10\x01\x12\x19\n" +
	"\x15CREATE_CHANNEL_FAILED\x10\x02\x12\x14\n" +
	"\x10UPDATE_URI_ERROR\x10\x03\x12\x16\n" +
	"\x12GET_CHANNEL_FAILED\x10\x04\x12\x17\n" +
	"\x13MEDIA_URL_NOT_FOUND\x10\x05\x12\x19\n" +
	"\x15STREAM_CHANNEL_CLOSED\x10\x062\x9f\x01\n" +
	"\x06Stream\x12S\n" +
	"\x12StreamServiceAlloc\x12\x1d.stream.StreamServiceAllocReq\x1a\x1e.stream.StreamServiceAllocResp\x12@\n" +
	"\vStreamAlloc\x12\x16.stream.StreamAllocReq\x1a\x17.stream.StreamAllocResp0\x01B7Z5github.com/ipron-ne/client-sdk-go/service/grpc/streamb\x06proto3"

var (
	file_stream_proto_rawDescOnce sync.Once
	file_stream_proto_rawDescData []byte
)

func file_stream_proto_rawDescGZIP() []byte {
	file_stream_proto_rawDescOnce.Do(func() {
		file_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stream_proto_rawDesc), len(file_stream_proto_rawDesc)))
	})
	return file_stream_proto_rawDescData
}

var file_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_stream_proto_goTypes = []any{
	(StreamStatus)(0),              // 0: stream.StreamStatus
	(*StreamServiceAllocReq)(nil),  // 1: stream.StreamServiceAllocReq
	(*StreamServiceAllocResp)(nil), // 2: stream.StreamServiceAllocResp
	(*StreamAllocReq)(nil),         // 3: stream.StreamAllocReq
	(*StreamAllocResp)(nil),        // 4: stream.StreamAllocResp
	(*StreamHeader)(nil),           // 5: stream.StreamHeader
	(*StreamChunk)(nil),            // 6: stream.StreamChunk
}
var file_stream_proto_depIdxs = []int32{
	5, // 0: stream.StreamAllocResp.header:type_name -> stream.StreamHeader
	6, // 1: stream.StreamAllocResp.chunk:type_name -> stream.StreamChunk
	0, // 2: stream.StreamHeader.status_code:type_name -> stream.StreamStatus
	1, // 3: stream.Stream.StreamServiceAlloc:input_type -> stream.StreamServiceAllocReq
	3, // 4: stream.Stream.StreamAlloc:input_type -> stream.StreamAllocReq
	2, // 5: stream.Stream.StreamServiceAlloc:output_type -> stream.StreamServiceAllocResp
	4, // 6: stream.Stream.StreamAlloc:output_type -> stream.StreamAllocResp
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_stream_proto_init() }
func file_stream_proto_init() {
	if File_stream_proto != nil {
		return
	}
	file_stream_proto_msgTypes[3].OneofWrappers = []any{
		(*StreamAllocResp_Header)(nil),
		(*StreamAllocResp_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stream_proto_rawDesc), len(file_stream_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_proto_goTypes,
		DependencyIndexes: file_stream_proto_depIdxs,
		EnumInfos:         file_stream_proto_enumTypes,
		MessageInfos:      file_stream_proto_msgTypes,
	}.Build()
	File_stream_proto = out.File
	file_stream_proto_goTypes = nil
	file_stream_proto_depIdxs = nil
}
